package day05;

public class StaticDemo {
    /*
    static的特点:
        1、static是一个修饰符，用于修饰成员，不能修饰类和接口。但是可以修饰成员内部类。
        2、static修饰的成员被所有的对象所共享。
        3、static优先于对象存在，因为static的成员随着类的加载就已经存在于方法区（数据区）。
        4、static修饰的成员多了一种调用方式，可以直接被类名所调用。类名.静态成员。
        5、static修饰的数据是共享数据，对象中存储的是特有数据。

    成员变量和静态变量的区别？
        1、两个变量的生命周期不同。
            成员变量随着对象的创建而存在，随着对象的被回收而释放。
            静态变量随着类的加载而存在，随着类的消失而消失。
        2、调用方式不同。
            成员变量只能被对象调用。
            静态变量可以被对象调用，也可以被类名调用。
        3、别名不同。
            成员变量也叫实例变量
            静态变量称为类变量，但是与类类型变量有区别。
        4、数据存储位置不同。
            成员变量数据存储在堆内存的对象中，所以也叫对象的特有数据。
            静态变量数据存储在JVM的方法区的静态区。也叫数据的共享数据。

     静态使用的注意事项：
        1、静态方法只能访问静态成员（包括变量和方法）。
            因为静态方法或属性独立于对象存在于方法区中，如果在没有创建对象时，通过
            类名调用了访问非静态成员的静态方法，此时非静态成员（属于实例对象）根本不在
            内存中，即静态先于非静态存在于内存中，所以静态方法访问不了非静态成员。
                非静态方法既可以访问静态，也可以访问非静态。
        2、静态方法中不可以使用this或者super关键字。
            因为this或者super是调用方法所属对象的引用，所以理由同上。
        3、主函数是静态的，所以主函数只能访问静态方法。
            见于day04包中FunctionDemo.java文件。该文件中非主函数也都是静态函数
            若不设置静态，还可以用new ClassName().methodName();的方式调用。

     静态什么时候用？
        1、静态变量。
            当分析对象中所具备的成员变量的值都是相同，这时这个成员变量就可以
            被静态static修饰。只要数据在对象中都是不同的，就是对象的特有数据，
            必须存储在对象中，是非静态的。如果是相同的数据，对象不需要做修改，只需要使用即可，
            不需要存储在对象中，就定义成静态的变量。
        2、静态函数。
            函数是否用静态修饰，就参考一点，就是该函数是否有访问到对象中的特有数据。
            简单点说，从源代码看，该功能是否需要访问非静态的成员变量。
            如果需要，该功能就是非静态的。如果不需要访问非静态变量（实例变量，也叫特有数据），
            就可以定义成静态函数。当然也可以定义成非静态的，但是非静态函数需要被对象调用，而仅创建对象来
            调用非静态的，但没有访问特有数据的方法，该对象的创建是没有意义的。
            静态函数可以被重载（同一个类中），但不能被重写（子类重写覆盖父类）。


     */
    public static void main(String[] args) {
        System.out.println(Chinese.country);//static 修饰的变量可以通过类名进行引用
        System.out.println(new Chinese().getCountry());//也可以通过对象进行调用。

        Chinese chinese=new Chinese("anpeng",24);
        chinese.show();
    }
}
